@model List<ProyectoKanban.Models.TareaModel>
@{
    ViewData["Title"] = "Tablero Kanban";
    var esAdmin = User.IsInRole("admin");
}

<h1 class="text-center my-4 text-white">üìã Tablero Kanban</h1>

@if (ViewBag.Alertas != null && ((List<ProyectoKanban.Entities.Tarea>)ViewBag.Alertas).Any())
{
    <div class="alert alert-warning mx-auto" style="max-width: 960px;">
        <h5><i class="bi bi-exclamation-triangle-fill"></i> Tareas pr√≥ximas a vencer</h5>
        <ul>
            @foreach (var tarea in (List<ProyectoKanban.Entities.Tarea>)ViewBag.Alertas)
            {
                <li>
                    <strong>@tarea.Nombre</strong> vence el <strong>@tarea.FechaEntrega.ToShortDateString()</strong>
                    @if (esAdmin)
                    {
                        <form method="post" asp-action="MarcarAlertaVista" class="d-inline">
                            <input type="hidden" name="id" value="@tarea.Id" />
                            <button class="btn btn-sm btn-outline-success ms-2" type="submit">
                                ‚úÖ Marcar como vista
                            </button>
                        </form>
                    }
                </li>
            }
        </ul>
    </div>
}

<style>
    .kanban-board {
        display: flex;
        gap: 20px;
        justify-content: center;
        flex-wrap: wrap;
    }

    .kanban-column {
        background-color: #f8f9fa;
        border-radius: 8px;
        padding: 16px;
        width: 300px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.08);
    }

    .kanban-column h2 {
        text-align: center;
        font-size: 1.2rem;
        font-weight: 600;
        color: #495057;
        margin-bottom: 16px;
    }

    .kanban-card {
        background-color: white;
        border-left: 5px solid #0d6efd;
        border-radius: 6px;
        padding: 12px;
        margin-bottom: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        cursor: @(esAdmin ? "grab" : "default");
        transition: transform 0.2s ease;
    }

    .kanban-card:hover {
        transform: scale(1.01);
    }

    .kanban-card small {
        color: #6c757d;
    }

    .kanban-card:active {
        cursor: @(esAdmin ? "grabbing" : "default");
    }

    body {
        background-image: url('/img/Fondo.jpeg');
        font-family: Arial, sans-serif;
        color: rgb(0, 0, 0)
    }
</style>

<div class="kanban-board">
    <div class="kanban-column" data-estado="Por hacer">
        <h2 class="text-primary">üìå Por hacer</h2>
    </div>
    <div class="kanban-column" data-estado="En progreso">
        <h2 class="text-warning">‚è≥ En progreso</h2>
    </div>
</div>

<script>
    const tareas = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model));
    const esAdmin = @User.IsInRole("admin").ToString().ToLower();
    let cardMap = {};

    function allowDrop(ev) {
        ev.preventDefault();
    }

    function drag(ev) {
        ev.dataTransfer.setData("text", ev.target.id);
    }

    function drop(ev) {
        if (!esAdmin) return;

        ev.preventDefault();
        const data = ev.dataTransfer.getData("text");
        const card = document.getElementById(data);
        const target = ev.target.closest('.kanban-column');

        if (target && card) {
            target.appendChild(card);

            const estadoNuevo = target.getAttribute("data-estado");
            const tareaId = data.replace("card-", "");
            const cards = Array.from(target.querySelectorAll('.kanban-card'));
            const nuevoOrden = cards.findIndex(c => c.id === data);

            actualizarEstado(tareaId, estadoNuevo, nuevoOrden);
        }
    }

    function crearCard(tarea, id) {
        const card = document.createElement('div');
        card.className = 'kanban-card';
        card.id = 'card-' + id;

        if (esAdmin) {
            card.draggable = true;
            card.ondragstart = drag;
        }

        card.innerHTML = `
            <strong>${tarea.Nombre}</strong><br>
            <small>${tarea.UsuarioNombre || "Sin asignar"}</small><br>
            ${esAdmin && tarea.Estado === "En progreso" ? `<button class="btn btn-sm btn-success mt-2" onclick="marcarComoHecho('${tarea.Id}')">‚úî Marcar como hecho</button>` : ""}
            ${esAdmin ? `<a href="/Tarea/ConfigurarAlerta/${tarea.Id}" class="btn btn-sm btn-outline-warning mt-1">‚è∞ Alerta</a>` : ""}
        `;

        return card;
    }

    function actualizarEstado(id, estado, orden) {
        fetch('/Tarea/ActualizarEstadoTarea', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ id, estado, orden })
        }).catch(err => console.error('Error al actualizar:', err));
    }

    function marcarComoHecho(id) {
        const card = document.getElementById('card-' + id);
        const columna = card.closest('.kanban-column');
        const orden = columna.querySelectorAll('.kanban-card').length - 1;

        actualizarEstado(id, "Hecho", orden);
        card.remove(); // quitar del tablero
    }

    window.addEventListener('DOMContentLoaded', () => {
        tareas.forEach(tarea => {
            if (!tarea.Estado) return;
            if (tarea.Estado === "Hecho") return;

            if (cardMap[tarea.Id]) return;

            const card = crearCard(tarea, tarea.Id);
            const columna = document.querySelector(`.kanban-column[data-estado="${tarea.Estado}"]`);
            if (columna) {
                columna.appendChild(card);
                cardMap[tarea.Id] = card;
            }
        });

        if (esAdmin) {
            document.querySelectorAll('.kanban-column').forEach(col => {
                col.addEventListener('dragover', allowDrop);
                col.addEventListener('drop', drop);
            });
        }
    });
</script>
